import turtle

# Function to draw the tree branches
def draw_tree(t, length, angle_left, angle_right, depth, reduction_factor):
    if depth == 0:
        return

    # Set the color for parent branches (brown) and child branches (green)
    if depth == 1:  # Draw green leaves for the smallest branches
        t.color("green")
        t.pensize(1)
    else:  # Parent branches should be brown
        t.color("brown")
        t.pensize(2)

    t.forward(length)  # Draw the current branch

    # Draw the left branch recursively
    t.left(angle_left)
    draw_tree(t, length * reduction_factor, angle_left, angle_right, depth - 1, reduction_factor)

    # Go back to the main branch
    t.right(angle_left + angle_right)

    # Draw the right branch recursively
    draw_tree(t, length * reduction_factor, angle_left, angle_right, depth - 1, reduction_factor)

    # Go back to the main branch
    t.left(angle_right)
    t.backward(length)

    # After finishing both branches, draw leaves at the tip of this branch
    if depth == 1:  # Only draw leaves at the last depth (the smallest branches)
        draw_leaves(t)

# Function to draw leaves (a small green circle at the end of branches)
def draw_leaves(t):
    t.color("green")
    t.begin_fill()
    t.circle(5)  # Draw a small circular leaf
    t.end_fill()

# Function to set up the turtle environment and start drawing
def setup_tree():
    # Set up the screen
    screen = turtle.Screen()
    screen.bgcolor("skyblue")  # Set the background color

    # Set up the turtle
    t = turtle.Turtle()
    t.speed(0)  # Set turtle speed to fastest

    # Get user inputs for tree parameters
    angle_left = float(input("Enter the left branch angle (in degrees): "))
    angle_right = float(input("Enter the right branch angle (in degrees): "))
    start_length = float(input("Enter the starting branch length (in pixels): "))
    depth = int(input("Enter the recursion depth: "))
    reduction_factor = float(input("Enter the branch length reduction factor (as a percentage, e.g., 70 for 70%): ")) / 100

    # Position the turtle at the base of the tree
    t.left(90)  # Face upwards
    t.penup()
    t.backward(100)  # Move the turtle down a little bit to start
    t.pendown()

    # Draw the tree with the provided parameters
    draw_tree(t, start_length, angle_left, angle_right, depth, reduction_factor)

    # Hide the turtle after drawing
    t.hideturtle()

    # Keep the window open
    turtle.done()

# Run the setup function
setup_tree()
